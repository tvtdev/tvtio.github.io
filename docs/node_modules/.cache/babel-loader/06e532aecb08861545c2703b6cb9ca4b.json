{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport AnalyticsClass from './Analytics';\nimport Amplify, { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nvar logger = new Logger('Analytics');\nvar endpointUpdated = false;\nvar authConfigured = false;\nvar analyticsConfigured = false;\nvar _instance = null;\n\nif (!_instance) {\n  logger.debug('Create Analytics Instance');\n  _instance = new AnalyticsClass();\n}\n\nvar Analytics = _instance;\nAmplify.register(Analytics);\nexport default Analytics;\nexport { AnalyticsClass };\nexport * from './Providers';\n\nvar listener = function listener(capsule) {\n  var channel = capsule.channel,\n      payload = capsule.payload,\n      source = capsule.source;\n  logger.debug('on hub capsule ' + channel, payload);\n\n  switch (channel) {\n    case 'auth':\n      authEvent(payload);\n      break;\n\n    case 'storage':\n      storageEvent(payload);\n      break;\n\n    case 'analytics':\n      analyticsEvent(payload);\n      break;\n\n    default:\n      break;\n  }\n};\n\nvar storageEvent = function storageEvent(payload) {\n  var _a = payload.data,\n      attrs = _a.attrs,\n      metrics = _a.metrics;\n  if (!attrs) return;\n\n  if (analyticsConfigured) {\n    Analytics.record({\n      name: 'Storage',\n      attributes: attrs,\n      metrics: metrics\n    }).catch(function (e) {\n      logger.debug('Failed to send the storage event automatically', e);\n    });\n  }\n};\n\nvar authEvent = function authEvent(payload) {\n  var event = payload.event;\n\n  if (!event) {\n    return;\n  }\n\n  switch (event) {\n    case 'signIn':\n      if (authConfigured && analyticsConfigured) {\n        Analytics.record({\n          name: '_userauth.sign_in'\n        }).catch(function (e) {\n          logger.debug('Failed to send the sign in event automatically', e);\n        });\n      }\n\n      break;\n\n    case 'signUp':\n      if (authConfigured && analyticsConfigured) {\n        Analytics.record({\n          name: '_userauth.sign_up'\n        }).catch(function (e) {\n          logger.debug('Failed to send the sign up event automatically', e);\n        });\n      }\n\n      break;\n\n    case 'signOut':\n      break;\n\n    case 'signIn_failure':\n      if (authConfigured && analyticsConfigured) {\n        Analytics.record({\n          name: '_userauth.auth_fail'\n        }).catch(function (e) {\n          logger.debug('Failed to send the sign in failure event automatically', e);\n        });\n      }\n\n      break;\n\n    case 'configured':\n      authConfigured = true;\n\n      if (authConfigured && analyticsConfigured) {\n        sendEvents();\n      }\n\n      break;\n  }\n};\n\nvar analyticsEvent = function analyticsEvent(payload) {\n  var event = payload.event;\n  if (!event) return;\n\n  switch (event) {\n    case 'pinpointProvider_configured':\n      analyticsConfigured = true;\n\n      if (authConfigured && analyticsConfigured) {\n        sendEvents();\n      }\n\n      break;\n  }\n};\n\nvar sendEvents = function sendEvents() {\n  var config = Analytics.configure();\n\n  if (!endpointUpdated && config['autoSessionRecord']) {\n    Analytics.updateEndpoint({\n      immediate: true\n    }).catch(function (e) {\n      logger.debug('Failed to update the endpoint', e);\n    });\n    endpointUpdated = true;\n  }\n\n  Analytics.autoTrack('session', {\n    enable: config['autoSessionRecord']\n  });\n};\n\nHub.listen('auth', listener);\nHub.listen('storage', listener);\nHub.listen('analytics', listener);","map":null,"metadata":{},"sourceType":"module"}